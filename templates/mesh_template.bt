LittleEndian();

struct vec4 { 
    float x;
    float y;
    float z;
    float w;
};
struct ivec4 { 
    int x;
    int y;
    int z;
    int w;
};
struct vec3 { 
    float x;
    float y;
    float z;
};
struct vec2 { 
    float x;
    float y;
};

struct STRING_t {
    unsigned char len;
    char str[len];
};

typedef unsigned int uint32;
typedef unsigned short uint16;
typedef unsigned char uint8;

struct HEADER {
    char MAGIC[4];
    uint32 FileSize; // filesize in bytes
    uint32 FileVersion;
    uint32 Flag;
    struct UINT64_t {
        uint32 Upper;
        uint32 Lower;
    } Timestamp;
    uint16 NumPrims;
    uint16 PADDING[3];
} header<bgcolor=cLtBlue>;

local int num_prims = header.NumPrims;
local int i;

// Loop through materials
for (i = 0; i < num_prims; i++) {
    struct MATERIAL_t {
        char Magic[4]<bgcolor=cDkRed>;
        uint32 Flag;
        
        vec3 DiffuseFactor;
        float NormalScale;
        float AmbientStrength;
        float MetallicFactor;
        float RoughnessFactor;
        vec3 EmissiveFactor;
        
        STRING_t mat_name;
        
        if (Flag & 0x02) { // has diffuse texture
            STRING_t DiffuseTexture;
        }
        if (Flag & 0x04) { // has normal texture
            STRING_t NormalTexture;
        }
        if (Flag & 0x08) { // has amr texture
            STRING_t AMRTexture;
        }
        if (Flag & 0x10) { // has emissive texture
            STRING_t EmissiveTexture;
        }
    } Material<bgcolor=cLtRed>;
}

// Loop through primitives
for (i = 0; i < num_prims; i++) {
    struct PRIM_t {
        char Magic[4]<bgcolor=cDkGreen>;
        uint32 num_verts;
        uint32 num_inds;
        uint32 mat_idx;
        
        uint32 indices[num_inds];
        
        struct VERTEX_t {
            vec3 position;
            vec3 normal;
            vec3 tangent;
            vec3 bitangent;
            vec2 uv;
        } vertices[num_verts];
    } Primitive<bgcolor=cLtGreen>;
}

string End;

/*
// determine flags
local unsigned int has_animations = headerInfo.flag & 0x01;

// Loop through submeshes now
local int i;
for (i = 0; i < headerInfo.numSubmeshes; i++) {
    struct SUBMESH {
        string tag<bgcolor=cDkRed>;
        unsigned int startIndex;
        unsigned int materialIndex;
        unsigned int numIndices;
        float transform[16];
    } submesh<bgcolor=cLtRed>;
}

struct Mat4x4 {
    vec4 col1 <read=ReadVec4>;
    vec4 col2 <read=ReadVec4>;
    vec4 col3 <read=ReadVec4>;
    vec4 col4 <read=ReadVec4>;
};

// Read bone heirarchy if has_animations
struct JOINT {
    unsigned short name_len;
    char name[name_len];
    int parent_idx;
    Mat4x4 Local_Matrix;
    Mat4x4 Inv_Model_Matrix;
};
struct JOINTS {
    char BONE[4];
    unsigned short num_bones;

    for (i = 0; i < num_bones; i++) {
        JOINT joint;
    }
};
if (has_animations) {
    JOINTS joints;
}

// DATA SECTION
// Loop through verts now

struct STAT_VERT {
    vec3 Position <read=ReadVec3>;
    vec3 Normal <read=ReadVec3>;
    vec3 Tangent <read=ReadVec3>;
    vec3 Bitangent <read=ReadVec3>;
    vec2 Tex <read=ReadVec2>;
};

struct ANIM_VERT {
    vec3 Position <read=ReadVec3>;
    vec3 Normal <read=ReadVec3>;
    vec3 Tangent <read=ReadVec3>;
    vec3 Bitangent <read=ReadVec3>;
    vec2 Tex <read=ReadVec2>;
    ivec4 Bones <read=ReadIVec4>;
    vec4 Weights <read=ReadVec4>;
};

struct DATA {
    char DATA[4];
    struct INDS {
        char TAG[4]<bgcolor=cDkGreen>;
        for (i = 0; i < headerInfo.numInds; i++) {
            unsigned int index;
        }
    } indexBlock <read=ReadIndexBlock>;
    struct VERTS {
        char TAG[4]<bgcolor=cDkGreen>;
        for (i = 0; i < headerInfo.numVerts; i++) {
            if (has_animations) {
                if(i % 2 == 0)
                    ANIM_VERT vert<bgcolor=cLtGreen>;
                else
                    ANIM_VERT vert<bgcolor=cDkGreen>;
            } else {
                if(i % 2 == 0)
                    STAT_VERT vert<bgcolor=cLtGreen>;
                else
                    STAT_VERT vert<bgcolor=cDkGreen>;
            }
        }
    } vertBlock <read=ReadVertexBlock>;
} dataBlock<bgcolor=cLtGreen>;

if (has_animations) {
    struct ANIMS {
        char MAGIC[4];
        unsigned short num_anims;
        
        for (i = 0; i < num_anims; i++) {
            struct ASTR {
                unsigned short name_len;
                char name[name_len];
            } name <read=ReadAStr>;
        }
    } anims;
}

char END[4] <bgcolor=cRed>;

// Custom read functions
string ReadVertexBlock( VERTS &v )
{
    string str;
    SPrintf( str, "%i vertices", headerInfo.numVerts );
    return str;
}
string ReadIndexBlock( INDS &v )
{
    string str;
    SPrintf( str, "%i indices", headerInfo.numInds );
    return str;
}
string ReadVec4( vec4 &v )
{
    string str;
    SPrintf( str, "[%.2f,%.2f,%.2f,%.2f]", v.x, v.y, v.z, v.w );
    return str;
}
string ReadIVec4( ivec4 &v )
{
    string str;
    SPrintf( str, "[%d,%d,%d,%d]", v.x, v.y, v.z, v.w );
    return str;
}
string ReadVec3( vec3 &v )
{
    string str;
    SPrintf( str, "[%.2f,%.2f,%.2f]", v.x, v.y, v.z );
    return str;
}
string ReadVec2( vec2 &v )
{
    string str;
    SPrintf( str, "[%.2f,%.2f]", v.x, v.y );
    return str;
}
string ReadAStr( ASTR &v )
{
    string str;
    SPrintf( str, "%s", v.name );
    return str;
}
*/